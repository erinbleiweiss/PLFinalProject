Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    QUOTE
    LPAREN
    TRUE
    RPAREN
    NIL
    SQUOTE
    FALSE

Grammar

Rule 0     S' -> program
Rule 1     program -> expressions
Rule 2     program -> declaration
Rule 3     program -> string
Rule 4     program -> empty
Rule 5     expressions -> expression
Rule 6     expressions -> expressions expression
Rule 7     expression -> operation
Rule 8     operation -> addition
Rule 9     operation -> subtraction
Rule 10    operation -> multiplication
Rule 11    operation -> division
Rule 12    addition -> INTEGER PLUS INTEGER
Rule 13    addition -> INTEGER PLUS addition
Rule 14    subtraction -> INTEGER MINUS INTEGER
Rule 15    subtraction -> INTEGER MINUS subtraction
Rule 16    multiplication -> INTEGER MULT INTEGER
Rule 17    multiplication -> INTEGER MULT multiplication
Rule 18    division -> INTEGER DIV INTEGER
Rule 19    division -> INTEGER DIV division
Rule 20    declaration -> let
Rule 21    let -> LET TEXT EQUALS INTEGER
Rule 22    string -> CLSTRING
Rule 23    empty -> <empty>

Terminals, with rules where they appear

CLSTRING             : 22
DIV                  : 18 19
EQUALS               : 21
FALSE                : 
INTEGER              : 12 12 13 14 14 15 16 16 17 18 18 19 21
LET                  : 21
LPAREN               : 
MINUS                : 14 15
MULT                 : 16 17
NIL                  : 
PLUS                 : 12 13
QUOTE                : 
RPAREN               : 
SQUOTE               : 
TEXT                 : 21
TRUE                 : 
error                : 

Nonterminals, with rules where they appear

addition             : 8 13
declaration          : 2
division             : 11 19
empty                : 4
expression           : 5 6
expressions          : 1 6
let                  : 20
multiplication       : 10 17
operation            : 7
program              : 0
string               : 3
subtraction          : 9 15

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . expressions
    (2) program -> . declaration
    (3) program -> . string
    (4) program -> . empty
    (5) expressions -> . expression
    (6) expressions -> . expressions expression
    (20) declaration -> . let
    (22) string -> . CLSTRING
    (23) empty -> .
    (7) expression -> . operation
    (21) let -> . LET TEXT EQUALS INTEGER
    (8) operation -> . addition
    (9) operation -> . subtraction
    (10) operation -> . multiplication
    (11) operation -> . division
    (12) addition -> . INTEGER PLUS INTEGER
    (13) addition -> . INTEGER PLUS addition
    (14) subtraction -> . INTEGER MINUS INTEGER
    (15) subtraction -> . INTEGER MINUS subtraction
    (16) multiplication -> . INTEGER MULT INTEGER
    (17) multiplication -> . INTEGER MULT multiplication
    (18) division -> . INTEGER DIV INTEGER
    (19) division -> . INTEGER DIV division

    CLSTRING        shift and go to state 4
    $end            reduce using rule 23 (empty -> .)
    LET             shift and go to state 11
    INTEGER         shift and go to state 14

    expression                     shift and go to state 1
    string                         shift and go to state 2
    subtraction                    shift and go to state 3
    program                        shift and go to state 5
    expressions                    shift and go to state 6
    declaration                    shift and go to state 7
    empty                          shift and go to state 8
    division                       shift and go to state 9
    let                            shift and go to state 10
    multiplication                 shift and go to state 12
    operation                      shift and go to state 13
    addition                       shift and go to state 15

state 1

    (5) expressions -> expression .

    INTEGER         reduce using rule 5 (expressions -> expression .)
    $end            reduce using rule 5 (expressions -> expression .)


state 2

    (3) program -> string .

    $end            reduce using rule 3 (program -> string .)


state 3

    (9) operation -> subtraction .

    INTEGER         reduce using rule 9 (operation -> subtraction .)
    $end            reduce using rule 9 (operation -> subtraction .)


state 4

    (22) string -> CLSTRING .

    $end            reduce using rule 22 (string -> CLSTRING .)


state 5

    (0) S' -> program .



state 6

    (1) program -> expressions .
    (6) expressions -> expressions . expression
    (7) expression -> . operation
    (8) operation -> . addition
    (9) operation -> . subtraction
    (10) operation -> . multiplication
    (11) operation -> . division
    (12) addition -> . INTEGER PLUS INTEGER
    (13) addition -> . INTEGER PLUS addition
    (14) subtraction -> . INTEGER MINUS INTEGER
    (15) subtraction -> . INTEGER MINUS subtraction
    (16) multiplication -> . INTEGER MULT INTEGER
    (17) multiplication -> . INTEGER MULT multiplication
    (18) division -> . INTEGER DIV INTEGER
    (19) division -> . INTEGER DIV division

    $end            reduce using rule 1 (program -> expressions .)
    INTEGER         shift and go to state 14

    expression                     shift and go to state 16
    subtraction                    shift and go to state 3
    division                       shift and go to state 9
    multiplication                 shift and go to state 12
    operation                      shift and go to state 13
    addition                       shift and go to state 15

state 7

    (2) program -> declaration .

    $end            reduce using rule 2 (program -> declaration .)


state 8

    (4) program -> empty .

    $end            reduce using rule 4 (program -> empty .)


state 9

    (11) operation -> division .

    INTEGER         reduce using rule 11 (operation -> division .)
    $end            reduce using rule 11 (operation -> division .)


state 10

    (20) declaration -> let .

    $end            reduce using rule 20 (declaration -> let .)


state 11

    (21) let -> LET . TEXT EQUALS INTEGER

    TEXT            shift and go to state 17


state 12

    (10) operation -> multiplication .

    INTEGER         reduce using rule 10 (operation -> multiplication .)
    $end            reduce using rule 10 (operation -> multiplication .)


state 13

    (7) expression -> operation .

    INTEGER         reduce using rule 7 (expression -> operation .)
    $end            reduce using rule 7 (expression -> operation .)


state 14

    (12) addition -> INTEGER . PLUS INTEGER
    (13) addition -> INTEGER . PLUS addition
    (14) subtraction -> INTEGER . MINUS INTEGER
    (15) subtraction -> INTEGER . MINUS subtraction
    (16) multiplication -> INTEGER . MULT INTEGER
    (17) multiplication -> INTEGER . MULT multiplication
    (18) division -> INTEGER . DIV INTEGER
    (19) division -> INTEGER . DIV division

    PLUS            shift and go to state 21
    MINUS           shift and go to state 18
    MULT            shift and go to state 20
    DIV             shift and go to state 19


state 15

    (8) operation -> addition .

    INTEGER         reduce using rule 8 (operation -> addition .)
    $end            reduce using rule 8 (operation -> addition .)


state 16

    (6) expressions -> expressions expression .

    INTEGER         reduce using rule 6 (expressions -> expressions expression .)
    $end            reduce using rule 6 (expressions -> expressions expression .)


state 17

    (21) let -> LET TEXT . EQUALS INTEGER

    EQUALS          shift and go to state 22


state 18

    (14) subtraction -> INTEGER MINUS . INTEGER
    (15) subtraction -> INTEGER MINUS . subtraction
    (14) subtraction -> . INTEGER MINUS INTEGER
    (15) subtraction -> . INTEGER MINUS subtraction

    INTEGER         shift and go to state 24

    subtraction                    shift and go to state 23

state 19

    (18) division -> INTEGER DIV . INTEGER
    (19) division -> INTEGER DIV . division
    (18) division -> . INTEGER DIV INTEGER
    (19) division -> . INTEGER DIV division

    INTEGER         shift and go to state 26

    division                       shift and go to state 25

state 20

    (16) multiplication -> INTEGER MULT . INTEGER
    (17) multiplication -> INTEGER MULT . multiplication
    (16) multiplication -> . INTEGER MULT INTEGER
    (17) multiplication -> . INTEGER MULT multiplication

    INTEGER         shift and go to state 28

    multiplication                 shift and go to state 27

state 21

    (12) addition -> INTEGER PLUS . INTEGER
    (13) addition -> INTEGER PLUS . addition
    (12) addition -> . INTEGER PLUS INTEGER
    (13) addition -> . INTEGER PLUS addition

    INTEGER         shift and go to state 29

    addition                       shift and go to state 30

state 22

    (21) let -> LET TEXT EQUALS . INTEGER

    INTEGER         shift and go to state 31


state 23

    (15) subtraction -> INTEGER MINUS subtraction .

    INTEGER         reduce using rule 15 (subtraction -> INTEGER MINUS subtraction .)
    $end            reduce using rule 15 (subtraction -> INTEGER MINUS subtraction .)


state 24

    (14) subtraction -> INTEGER MINUS INTEGER .
    (14) subtraction -> INTEGER . MINUS INTEGER
    (15) subtraction -> INTEGER . MINUS subtraction

    INTEGER         reduce using rule 14 (subtraction -> INTEGER MINUS INTEGER .)
    $end            reduce using rule 14 (subtraction -> INTEGER MINUS INTEGER .)
    MINUS           shift and go to state 18


state 25

    (19) division -> INTEGER DIV division .

    INTEGER         reduce using rule 19 (division -> INTEGER DIV division .)
    $end            reduce using rule 19 (division -> INTEGER DIV division .)


state 26

    (18) division -> INTEGER DIV INTEGER .
    (18) division -> INTEGER . DIV INTEGER
    (19) division -> INTEGER . DIV division

    INTEGER         reduce using rule 18 (division -> INTEGER DIV INTEGER .)
    $end            reduce using rule 18 (division -> INTEGER DIV INTEGER .)
    DIV             shift and go to state 19


state 27

    (17) multiplication -> INTEGER MULT multiplication .

    INTEGER         reduce using rule 17 (multiplication -> INTEGER MULT multiplication .)
    $end            reduce using rule 17 (multiplication -> INTEGER MULT multiplication .)


state 28

    (16) multiplication -> INTEGER MULT INTEGER .
    (16) multiplication -> INTEGER . MULT INTEGER
    (17) multiplication -> INTEGER . MULT multiplication

    INTEGER         reduce using rule 16 (multiplication -> INTEGER MULT INTEGER .)
    $end            reduce using rule 16 (multiplication -> INTEGER MULT INTEGER .)
    MULT            shift and go to state 20


state 29

    (12) addition -> INTEGER PLUS INTEGER .
    (12) addition -> INTEGER . PLUS INTEGER
    (13) addition -> INTEGER . PLUS addition

    INTEGER         reduce using rule 12 (addition -> INTEGER PLUS INTEGER .)
    $end            reduce using rule 12 (addition -> INTEGER PLUS INTEGER .)
    PLUS            shift and go to state 21


state 30

    (13) addition -> INTEGER PLUS addition .

    INTEGER         reduce using rule 13 (addition -> INTEGER PLUS addition .)
    $end            reduce using rule 13 (addition -> INTEGER PLUS addition .)


state 31

    (21) let -> LET TEXT EQUALS INTEGER .

    $end            reduce using rule 21 (let -> LET TEXT EQUALS INTEGER .)

